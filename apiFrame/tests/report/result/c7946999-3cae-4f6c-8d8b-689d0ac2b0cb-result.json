{"name": "test_login_book[datas3]", "status": "failed", "statusDetails": {"message": "AssertionError: assert '更新书的信息成功' in '{\"msg\": \"很抱歉，您查询的书的信息不存在\", \"status\": 1003}'\n +  where '{\"msg\": \"很抱歉，您查询的书的信息不存在\", \"status\": 1003}' = <function dumps at 0x000001883C3F25E8>({'msg': '很抱歉，您查询的书的信息不存在', 'status': 1003}, ensure_ascii=False)\n +    where <function dumps at 0x000001883C3F25E8> = json.dumps\n +    and   {'msg': '很抱歉，您查询的书的信息不存在', 'status': 1003} = <bound method Response.json of <Response [200]>>()\n +      where <bound method Response.json of <Response [200]>> = <Response [200]>.json", "trace": "datas = {'前置条件': 'login', '接口名称': '修改书籍信息', '是否运行': 'y', '期望结果': '更新书的信息成功', ...}\n\n    @pytest.mark.parametrize(\"datas\", excel.runs())\n    def test_login_book(datas):\n        # print(datas)\n        url = datas[ExcelValues.caseUrl]\n        params = datas[ExcelValues.params]\n    \n        if len(str(params).strip()) == 0:\n            pass\n        else:\n            params = json.loads(params)\n    \n        headers = datas[ExcelValues.headers]\n    \n        if len(str(headers).strip()) == 0:\n            pass\n        else:\n            headers = json.loads(headers)\n            # print(headers)\n    \n        r = obj.post(url=excel.case_prev('login')[ExcelValues.caseUrl],\n                     json=json.loads(excel.case_prev('login')[ExcelValues.params]))\n    \n        prevResult = r.json()[\"access_token\"]\n        # print(prevResult)\n        headers = excel.prevHeaders(prevResult)\n        # print(type(headers), \">>>>>>>>>>>\", headers)\n    \n        status_code = int(datas[ExcelValues.status_code])\n    \n        # print(\">>>>>>>>>\",status_code)\n    \n        def case_assert_result(r):\n            assert r.status_code == status_code\n            assert datas[ExcelValues.expect] in json.dumps(r.json(), ensure_ascii=False)\n    \n        def setUrl():\n            url = str(datas[ExcelValues.caseUrl]).replace(\"{bookID}\", readContent())\n            return url\n    \n        if datas[ExcelValues.method] == \"get\":\n            if \"/books\" in datas[ExcelValues.caseUrl]:\n                r = obj.get(url=datas[ExcelValues.caseUrl], headers=headers)\n                case_assert_result(r=r)\n            else:\n                r = obj.get(url=setUrl(), headers=headers)\n                case_assert_result(r=r)\n    \n    \n        elif datas[ExcelValues.method] == \"post\":\n            r = obj.post(url=datas[ExcelValues.caseUrl], json=params, headers=headers)\n            bookID = r.json()[0][\"datas\"][\"id\"]\n            writeContent(content=str(bookID))\n            case_assert_result(r=r)\n    \n        elif datas[ExcelValues.method] == \"put\":\n            r = obj.put(url=setUrl(), json=params, headers=headers)\n>           case_assert_result(r=r)\n\ntest_login_token_book.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nr = <Response [200]>\n\n    def case_assert_result(r):\n        assert r.status_code == status_code\n>       assert datas[ExcelValues.expect] in json.dumps(r.json(), ensure_ascii=False)\nE       assert '更新书的信息成功' in '{\"msg\": \"很抱歉，您查询的书的信息不存在\", \"status\": 1003}'\nE        +  where '{\"msg\": \"很抱歉，您查询的书的信息不存在\", \"status\": 1003}' = <function dumps at 0x000001883C3F25E8>({'msg': '很抱歉，您查询的书的信息不存在', 'status': 1003}, ensure_ascii=False)\nE        +    where <function dumps at 0x000001883C3F25E8> = json.dumps\nE        +    and   {'msg': '很抱歉，您查询的书的信息不存在', 'status': 1003} = <bound method Response.json of <Response [200]>>()\nE        +      where <bound method Response.json of <Response [200]>> = <Response [200]>.json\n\ntest_login_token_book.py:48: AssertionError"}, "parameters": [{"name": "datas", "value": "{'测试用例ID': '', '模块': '书籍管理系统', '接口名称': '修改书籍信息', '请求地址': 'http://127.0.0.1:5000/v1/api/book/{bookID}', '前置条件': 'login', '请求方法': 'put', '请求参数类型': 'json', '请求参数': '{ \"author\": \"无涯\",\"done\": true,\"name\": \"API全栈测试\" }', '期望结果': '更新书的信息成功', '是否运行': 'y', '请求头': '{\"Authorization\":\"JWT {token}\"}', '状态码': 200.0}"}], "start": 1603540795835, "stop": 1603540796917, "uuid": "7e996d59-302a-4f03-b9f9-7a2545eb3797", "historyId": "881ccb22132b424d31fe9d67c2412d59", "testCaseId": "6c2a60f5dd0b782747a1035c58f92078", "fullName": "test_login_token_book#test_login_book", "labels": [{"name": "suite", "value": "test_login_token_book"}, {"name": "host", "value": "PS-12"}, {"name": "thread", "value": "6704-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_login_token_book"}]}